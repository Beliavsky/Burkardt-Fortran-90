 5 August 2020   9:28:59.025 AM
 
ZIGGURAT_OPENMP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           1
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1863796367   -1863796367             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.762307E-01    0.679597E-01
      RATE:   131.181         147.146    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.660511E-01    0.660511E-01     0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.104295        0.102568    
      RATE:   95.8822         97.4965    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.326194       -0.326194         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.147802        0.149545    
      RATE:   67.6581         66.8696    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.351739        0.351739         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.148077        0.150970    
      RATE:   67.5324         66.2385    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
 5 August 2020   9:28:59.973 AM
 5 August 2020   9:28:59.974 AM
 
ZIGGURAT_OPENMP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           2
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    1249912034    1249912034             0
         1     503020437     503020437             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.720670E-01    0.358380E-01
      RATE:   138.760         279.034    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.791018        0.791018         0.00000    
         1    0.617119        0.617119         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.104827        0.544689E-01
      RATE:   95.3956         183.591    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.977730        0.977730         0.00000    
         1    -1.07051        -1.07051         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.148248        0.782864E-01
      RATE:   67.4544         127.736    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0     1.73583         1.73583         0.00000    
         1    0.502068        0.502068         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.148168        0.793219E-01
      RATE:   67.4910         126.069    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
 5 August 2020   9:29:00.696 AM
 5 August 2020   9:29:00.697 AM
 
ZIGGURAT_OPENMP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           4
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1669655539   -1669655539             0
         1     108105747     108105747             0
         2   -1587791136   -1587791136             0
         3    1909075432    1909075432             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.714346E-01    0.190677E-01
      RATE:   139.988         524.447    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.111253        0.111253         0.00000    
         1    0.525170        0.525170         0.00000    
         2    0.130314        0.130314         0.00000    
         3    0.944491        0.944491         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.107222        0.287882E-01
      RATE:   93.2646         347.365    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.828252       -0.828252         0.00000    
         1    0.314686        0.314686         0.00000    
         2   -0.989801       -0.989801         0.00000    
         3    -1.48772        -1.48772         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.149132        0.422823E-01
      RATE:   67.0545         236.506    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.129717        0.129717         0.00000    
         1    0.439901        0.439901         0.00000    
         2    0.834098        0.834098         0.00000    
         3    0.973891        0.973891         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.148717        0.425433E-01
      RATE:   67.2419         235.055    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
 5 August 2020   9:29:01.307 AM
 5 August 2020   9:29:01.308 AM
 
ZIGGURAT_OPENMP:
  FORTRAN90 version
 
  The number of processors available is:        8
  The number of threads available is:           8
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    2066176573    2066176573             0
         1   -1303848666   -1303848666             0
         2     167050157     167050157             0
         3     412856606     412856606             0
         4    -541773661    -541773661             0
         5    -189888513    -189888513             0
         6    -435391081    -435391081             0
         7    1328385438    1328385438             0
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.735369E-01    0.179418E-01
      RATE:   135.986         557.358    
 
TEST02
  R4_UNI computes uniformly random single precision real values.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.981069        0.981069         0.00000    
         1    0.196424        0.196424         0.00000    
         2    0.538894        0.538894         0.00000    
         3    0.596126        0.596126         0.00000    
         4    0.373859        0.373859         0.00000    
         5    0.455788        0.455788         0.00000    
         6    0.398628        0.398628         0.00000    
         7    0.809289        0.809289         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.110070        0.201877E-01
      RATE:   90.8516         495.352    
 
TEST03
  R4_NOR computes normal random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    -1.33701        -1.33701         0.00000    
         1     1.76707         1.76707         0.00000    
         2    0.673030        0.673030         0.00000    
         3   -0.489069E-01   -0.489069E-01     0.00000    
         4   -0.393083       -0.393083         0.00000    
         5   -0.447175       -0.447175         0.00000    
         6   -0.819305E-01   -0.819305E-01     0.00000    
         7   -0.861219       -0.861219         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.153320        0.355535E-01
      RATE:   65.2230         281.266    
 
TEST04
  R4_EXP computes exponential random single precision real values.
  Since the output is completely determined
  by the input value of SEED and the tables, we can run in
  parallel as long as we make an array of seeds and share the tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach the
  same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.445202        0.445202         0.00000    
         1    0.451912        0.451912         0.00000    
         2    0.355638        0.355638         0.00000    
         3    0.743365        0.743365         0.00000    
         4     1.85271         1.85271         0.00000    
         5    0.674086        0.674086         0.00000    
         6    0.810988        0.810988         0.00000    
         7    0.686205        0.686205         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster:
 
              Sequential      Parallel
 
      TIME:  0.151661        0.359549E-01
      RATE:   65.9365         278.126    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
 5 August 2020   9:29:01.907 AM
